mtcars
summary(mtcars$mpg)
count(mtcars$mpg)
summary(mtcars)
32*25
predict(lm)
predict.lm(mt)
sum(predict.lm(m5))
sum(predict.lm(mt))
power(sum(mtcars$mpg-predict.lm(m5)+5.344),2)
?power
sqmt <- sum(mtcars$mpg-predict.lm(mt)+5.344)*sum(mtcars$mpg-predict.lm(mt)+5.344)
sqmt
sqint <- sum(mtcars$mpg-c(37.2851,rep=32))*sum(mtcars$mpg-c(37.2851,rep=32))
sqint/sqmt
sqmt/sqint
mean(mtcars$mpg)
sqint <- sum(mtcars$mpg-c(20.09062,rep=32))*sum(mtcars$mpg-c(20.09062,rep=32))
sqint/sqmt
sqmt/sqint
sqmt
sqint
?lm
lm(mtcars$mpg)
lm(mtcars$mpg~1)
mt1 <- lm(mtcars$mpg~1)
sqmt <- sum(mtcars$mpg-predict.lm(mt1))*sum(mtcars$mpg-predict.lm(mt1))
sqint <- sum(mtcars$mpg-predict.lm(mt1))*sum(mtcars$mpg-predict.lm(mt1))
sqmt <- sum(mtcars$mpg-predict.lm(mt)+5.344)*sum(mtcars$mpg-predict.lm(mt)+5.344)
sqmt/sqint
sqint
predict.lm(mtcars$mpg)
predict.lm(mt1)
sum(mtcars$mpt=predict.lm(mt1))
sum(mtcars$mpt-predict.lm(mt1))
1/5.3
residual(mt1)
summary.lm(mt1)
mt1$residuals
sum(mt1$residuals)
sum(mt1$residuals*mt1$residuals$)
sqmt <- sum((mtcars$mpg-predict.lm(mt)+5.344)*(mtcars$mpg-predict.lm(mt)+5.344))
sqmt
sqint <- sum((mtcars$mpg-predict.lm(mt1))*(mtcars$mpg-predict.lm(mt1)))
sqmt/sqint
sqmt <- sum((mtcars$mpg-predict.lm(mt))*(mtcars$mpg-predict.lm(mt)))
sqmt/sqint
?ppois
ppois(5,3)
?puni
?puniform
?punif
punif(.5)
?pbinom
pbinom(4,5)
pbinom(4,5,.5)
ppois(15,10)
ppois(10,15)
?pbinom
pbinom(4,5,.5)
qt(.975,8)
?qt
1100+c(-1,1)*qt(.975,8)*30/sqrt(9)
2*3/qt(.975,8)
dfs<-10+10-2
tval <- qt(.975,dfs)
var1 <- .60
avg1 <-3
var2 <-.68
avg2<-5
n1<-10
n2<-10
sp <- sqrt(9*var1+9*var2/(10+10-2))
(avg1-avg2)+c(-1,1)+rval*sp*sqrt(2/10)
(avg1-avg2)+c(-1,1)+tval*sp*sqrt(2/10)
(avg1-avg2)+tval*sp*sqrt(2/10)
(avg1-avg2)+c(-1,1)*tval*sp*sqrt(2/10)
sp <- sqrt((9*var1+9*var2)/(10+10-2))
(avg1-avg2)+c(-1,1)*tval*sp*sqrt(2/10)
avg1<--3
avg2<-1
st1<-1.5
st2<-1.8
n1<-9
n2<-9
dfs<-9+9-2
tval<-qt(.95,dfs)
sp<-sqrt((8*st1*st1+8*st2*st2)/dfs)
(avg1-avg2)+c(-1,1)*tval*sp*sqrt(2/10)
(avg1-avg2)+c(-1,1)*tval*sp*sqrt(2/9)
?I
fit1<-lm(formula=mpg~I(1*(cylinders==4))+I(1*(cylinders==8))+wt,data=mtcars)
names(mtcars)
fit1<-lm(formula=mpg~I(1*(cyl==4))+I(1*(cyl==8))+wt,data=mtcars)
fit1
fit1<-lm(formula=mpg~cyl+wt,data=mtcars)
fit1
factor(cyl)
fit1<-lm(formula=mpg~factor(cyl)+wt,data=mtcars)
fit1
fit2<-lm(formula=mpg~factor(cyl),data=mtcars)
fit2
fit1int<-lm(formula=mpg~factor(cyl)*wt,data=mtcars)
fit1int
anova(fit1,fit1int)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
fit2<-lm(y~x)
round(hatvalues(fit),4)
round(hatvalues(fit2),4)
round(dfbets(fit2),4
)
round(dfbetas(fit2),4)
?mtcars
summary(lm(mpg~factor(cyl)data=mtcars))$pvalues
summary(lm(mpg~factor(cyl),data=mtcars))$pvalues
summary(lm(mpg~factor(cyl),data=mtcars))
?summary.lm
summary(lm(mpg~factor(am)+factor(cyl),data=mtcars))$coefficients
summary(lm(mpg~factor(am)+carb,data=mtcars))$coefficients
?mtcars
?leaps
install.packages("leaps")
?leaps
??leaps
library(leaps)
?leaps
leaps(x=cbind(factor(mtcars$am),mtcars$disp,mtcars$hp,mtcars$qsec,mtcars$vs,mtcars$gear,mtcars$carb),y=mtcars$mpg)
lsub<-leaps(x=cbind(factor(mtcars$am),mtcars$disp,mtcars$hp,mtcars$qsec,mtcars$vs,mtcars$gear,mtcars$carb),y=mtcars$mpg)
summary(lsub)
lsub
lsub<-leaps(x=cbind(factor(mtcars$am),mtcars$disp,mtcars$hp,mtcars$qsec,mtcars$vs,mtcars$gear,mtcars$carb),y=mtcars$mpg,nbest=1)
lsub
lsub<-leaps(x=cbind(factor(mtcars$am),mtcars$disp,mtcars$hp,mtcars$qsec,mtcars$vs,mtcars$gear,mtcars$carb),y=mtcars$mpg,nbest=1,names=c("am","disp","hp","qsec","vs","gear","carb"))
lsub
lsub<-leaps(x=cbind(factor(mtcars$am),mtcars$disp,mtcars$hp,mtcars$qsec,mtcars$vs,mtcars$gear,mtcars$carb),y=mtcars$mpg,nbest=1,names=c("am","disp","hp","qsec","vs","gear","carb"),method="adjr2")
lsub
lsub$which[4,]
install.packages("leaps")
?mtcars
?mtcars
meansims<-c(1:1000)
varsims<-c(1:1000)
for i=1 to 1000
{
simexp <- rexp(40,.2)
meansims[i]<-mean(simexp)
varsims[i]<-var(simexp)
}
hist(meansims)
summary(meansims)
hist(varsims)
summary(varsims)
?for
()
?for()
meansims<-c(1:1000)
varsims<-c(1:1000)
for(i in 1 to 1000)
{
simexp <- rexp(40,.2)
meansims[i]<-mean(simexp)
varsims[i]<-var(simexp)
}
hist(meansims)
summary(meansims)
hist(varsims)
summary(varsims)
meansims<-c(1:1000)
varsims<-c(1:1000)
for(i in 1 to 1000){
simexp <- rexp(40,.2)
meansims[i]<-mean(simexp)
varsims[i]<-var(simexp)
}
meansims<-c(1:1000)
varsims<-c(1:1000)
for(i in 1 to 1000)
{
simexp <- rexp(40,.2)
meansims[i]<-mean(simexp)
varsims[i]<-var(simexp)
}
meansims<-c(1:1000)
varsims<-c(1:1000)
for(i in 1:1000)
{
simexp <- rexp(40,.2)
meansims[i]<-mean(simexp)
varsims[i]<-var(simexp)
}
summary(meansims)
summary(varsims)
datasets(ToothGrowth)
summary(ToothGrowth)
?ToothGrowth
?t.test
group<-c(1,2,rep=5)
group
group=c(1,1,1,1,1,2,2,2,2,2)
group
bp<-c(140,138,150,148,135,132,135,151,146,130)
t.test(bp~group,paired=TRUE)
qt(.975,99)
1100+c(-1,1)*qt(.975,99)*30
1100+c(-1,1)*qt(.975,100)*30
1100/(30/10)
1100+c(-1,1)*qt(.975,99)*(30/10)
1100+1.984217*3
1.984217*10/30
+1100
1.984217*3
1.984217*10
1100+19.84217
1100-19.84217
?exact.test
?exact
?fishers.exact
?fisher.exact
?chisq
c(0,1,1,1)
ft<-c(0,1,1,1)
fisher.test(ft)
?fisher.test
?binom.test
binom.test(3,4,alternative="greater")
binom.test(10,1787,p=.01,alternative="less")
sp<-sqrt((8*1.5^2+8*1.8^2)/(9+9-2))
-3-1+c(-1,1)*qt(.975,16)*sp*(1/9+1/9)^.5
-3-1+c(-1,1)*qt(.995,16)*sp*(1/9+1/9)^.5
1-.995
(1-.995)*2
mu0=0
mua=0.01
sigma=0.04
n=100
z=qnorm(1-.05)
pnorm(mu0+z*sigma/sqrt(n),mean=mu0,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(n),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(140),mean=mu0,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(140),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(160),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(180),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(120),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
pnorm(mu0+z*sigma/sqrt(120),mean=mua,sd=sigma/sqrt(n),lower.tail=FALSE)
1100+c(-1,1)*qt(.975,8)*(30/3)
1100+c(-1,1)*qt(.95,8)*(30/3)
?power.t.test
power.t.test(delta=.01,sd=.04,sig.level=.05,power=.9,type="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05,power=.9,type="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05,power=.9,alternative="one.sided")
power.t.test(delta=.01,sd=.04,sig.level=.05,power=.9,alternative="one.sided",type="one.sample")
?shuttle
data(shuttle)
library(MASS)
?shuttle
lm(use~wind)
lm(use~wind,data=shuttle)
summary(lm(use~wind,data=shuttle))
table(use)
table(shuttle$use)
lm(use~wind,data=shuttle)
levels(shuttle$use)
factor(shuttle$use)
lm(factor(shuttle$use)~wind)
lm(factor(shuttle$use)~shuttle$wind)
use2<-shuttle$use
table(use2)
use2<-0[use2=="noauto"]
table(use2)
use2<-shuttle$use
loguse<-glm(use@wind,data=shuttle, dist="binomial")
loguse<-glm(use~wind,data=shuttle, dist="binomial")
loguse<-glm(use~wind,data=shuttle, family="binomial")
loguse
exp(loguse$coeff)
sum(exp(loguse$coeff))
?shuttle
loguse2<-glm(use~wind+magn,data=shuttle, family="binomial")
sum(exp(loguse2$coeff))
exp(loguse2$coeff)
c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1)
c
table(c)
test<-c(0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1)
table(test)
glm(test,rnorm(rep=50),family="binomial")
?rnorm
?rnorm
rnorm(50)
glm(test,rnorm(50),family="binomial")
glm(test~rnorm(50),family="binomial")
glm(test~rnorm(10),family="binomial")
glm(test~rnorm(20),family="binomial")
rn<-rnorm(20)
test2<-c(1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0)
glm(test~rn,family="binomial")
glm(test2~rn,family-"binomial")
glm(test2~rn,family-="binomial")
glm(test2~rn,family="binomial")
?InsectSprays
glm(InsectSprays[,1]~InsectSprays[,2],family="Poisson")
glm(InsectSprays[,1]~InsectSprays[,2],family="poisson")
exp(.05588)
log(.05588)
exp(2.67415+.05588)
exp(.05588)
table(InsectSprays[,2])
rn<-rnorm(72)
glm(InsectSprays[,1]~InsectSprays[,2]+log(rn),family="poisson")
glm(InsectSprays[,1]~InsectSprays[,2],offset=log(rn),family="poisson")
glm(InsectSprays[,1]~InsectSprays[,2],offset=log(rn*10),family="poisson")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knot<-0
splineTerms<-(x>knot)*(x-knot)
splineTerms
xmat<-cbind(1,x,splineTerms)
lm(y~xMat-1)
lm(y~xmat-1)
lm(y~xmat)
install.packages("rCharts")
library("rCharts")
?rCharts
?galton
attach("galton")
?galton
header("galton")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(testIndex)
View(training)
View(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
View(training)
View(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(SuperPlasticizer)
hist(concrete$SuperPlasticizer)
summary(concrete$SuperPlasticizer)
hist(concrete$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?preProcess
preProcess(AlzheimerDisease, method="pca",thresh=0.9)
View(adData)
View(adData)
names(predictors)
?cbind
?preProcess
train2<-cbind(training$IL_11,training$IL_13,training$IL_16)
preprocess(train2)
preProcess(train2)
preProcess(train2,outcome=train$diagnosis)
preProcess(train2,outcome=train$diagnosis,method='pca',thresh="0.9")
preProcess(train2,outcome=train$diagnosis,method="pca",thresh="0.9")
training$IL_11:training$IL_8
?data.frame
?preProcess
names(training)
training[c(1,58:69),]
training[,c(1,58:69)]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
preProcess(train2,method="pca",thresh="0.9")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
?train
train(type-.,data=train2,method="glm")
?train
train2
train(train2[,2:13],train2$diagnosis,method="glm")
train(train2[,2:13],train2$diagnosis,method="glm")
install.packages("e1071")
library(e1071)
train(train2[,2:13],train2$diagnosis,method="glm")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
train(train2[,2:13],train2$diagnosis,method="glm")
train(train2[,2:13],train2$diagnosis,method="glm",preProcess=c("pca"),thresh="0.8")
train(train2[,2:13],train2$diagnosis,method="glm",preProcess=preProcess(train2,method="pca",thresh="0.8"))
train(train2[,2:13],train2$diagnosis,method="glm",preProcess="pca")
train(train2[,2:13],train2$diagnosis,method="glm",preProcess="pca",thresh="0.8")
train(train2[,2:13],train2$diagnosis,method="glm",preProcess="pca")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
names(train2)
preProcess(train2,method="pca",thresh="0.9")
preProcess(train2,method="pca",thresh=0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
preProcess(train2,method="pca",thresh=0.9)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
View(training)
View(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?ln
?log
log(0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
train2<-training[,c(1,58:69)]
preProcess(train2,method="pca",thresh=0.9)
?slidify
install.packages("shiny")
install.packages("devtools")
install_github("slidify",'ramnathv')
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library("slidify")
setwd("C:/Users/slussetc/Documents/GitHub/Developing_Data_Products")
author("Random Normal Generator")
qnorm(0.95)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
publish("slussetc","Developing_Data_Products")
publish("TiffaniHeaberlin","Random_Number_Generator")
